% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amRangeAreaChart.R
\name{amRangeAreaChart}
\alias{amRangeAreaChart}
\title{Create a HTML widget displaying a line chart}
\usage{
amRangeAreaChart(
  data,
  xValue,
  yValues,
  yValueNames = NULL,
  xLimits = NULL,
  yLimits = NULL,
  expandX = 0,
  expandY = 5,
  valueFormatter = "#.",
  chartTitle = NULL,
  theme = NULL,
  draggable = FALSE,
  tooltip = NULL,
  bullets = NULL,
  alwaysShowBullets = FALSE,
  lineStyle = NULL,
  areas = NULL,
  backgroundColor = NULL,
  xAxis = NULL,
  yAxis = NULL,
  scrollbarX = FALSE,
  scrollbarY = FALSE,
  gridLines = NULL,
  legend = NULL,
  caption = NULL,
  image = NULL,
  width = NULL,
  height = NULL,
  chartId = NULL,
  elementId = NULL
)
}
\arguments{
\item{data}{a dataframe}

\item{xValue}{name of the column of \code{data} to be used on the
x-axis}

\item{yValues}{a character matrix with two columns; each row corresponds to
a range area and provides the names of two columns of \code{data} to be
used as the limits of the range area}

\item{yValueNames}{names of the variables on the y-axis,
to appear in the legend;
\code{NULL} to use \code{yValues} as names, otherwise a named list of the
form \code{list(yvalue1 = "ValueName1", yvalue2 = "ValueName2", ...)} where
\code{yvalue1}, \code{yvalue2}, ... are the column names given in
\code{yValues} and \code{"ValueName1"}, \code{"ValueName2"}, ... are the
desired names to appear in the legend}

\item{xLimits}{range of the x-axis, a vector of two values specifying
the left and the right limits of the x-axis; \code{NULL} for default values}

\item{yLimits}{range of the y-axis, a vector of two values specifying
the lower and the upper limits of the y-axis; \code{NULL} for default values}

\item{expandX}{if \code{xLimits = NULL}, a percentage of the range of the
x-axis used to expand this range}

\item{expandY}{if \code{yLimits = NULL}, a percentage of the range of the
y-axis used to expand this range}

\item{valueFormatter}{a number formatter for XXXX; see
\url{https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/}}

\item{chartTitle}{chart title, \code{NULL}, character, or list of settings}

\item{theme}{theme, \code{NULL} or one of \code{"dataviz"},
\code{"material"}, \code{"kelly"}, \code{"dark"}, \code{"moonrisekingdom"},
\code{"frozen"}, \code{"spiritedaway"}, \code{"patterns"},
\code{"microchart"}}

\item{draggable}{\code{TRUE}/\code{FALSE} to enable/disable dragging of
all lines, otherwise a named list of the form
\code{list(yvalue1 = TRUE, yvalue2 = FALSE, ...)} to enable/disable the
dragging for each bar corresponding to a column given in \code{yValues}}

\item{tooltip}{settings of the tooltips; \code{NULL} for default,
\code{FALSE} for no tooltip, otherwise a named list of the form
\code{list(yvalue1 = settings1, yvalue2 = settings2, ...)} where
\code{settings1}, \code{settings2}, ... are lists created with
\code{\link{amTooltip}}; this can also be a
single list of settings that will be applied to each series,
or a just a string for the text to display in the tooltip}

\item{bullets}{settings of the bullets; \code{NULL} for default,
otherwise a named list of the form
\code{list(yvalue1 = settings1, yvalue2 = settings2, ...)} where
\code{settings1}, \code{settings2}, ... are lists created with
\code{\link{amCircle}}, \code{\link{amTriangle}} or
\code{\link{amRectangle}}; this can also be a
single list of settings that will be applied to each series}

\item{alwaysShowBullets}{logical, whether the bullets should always be
visible, or visible on hover only}

\item{lineStyle}{settings of the lines; \code{NULL} for default,
otherwise a named list of the form
\code{list(yvalue1 = settings1, yvalue2 = settings2, ...)} where
\code{settings1}, \code{settings2}, ... are lists created with
\code{\link{amLine}}; this can also be a
single list of settings that will be applied to each line}

\item{areas}{an unnamed list of list of settings for the range areas; the
n-th inner list of settings correspond to the n-th row of the
\code{yValues} matrix; each list of settings has three possible fields:
\code{name} for the legend label, \code{color} for the color of the range
area, and \code{opacity} for the opacity of the range area, a number
between 0 and 1}

\item{backgroundColor}{a color for the chart background}

\item{xAxis}{settings of the x-axis given as a list, or just a string
for the axis title}

\item{yAxis}{settings of the y-axis given as a list, or just a string
for the axis title}

\item{scrollbarX}{logical, whether to add a scrollbar for the category axis}

\item{scrollbarY}{logical, whether to add a scrollbar for the value axis}

\item{gridLines}{settings of the grid lines}

\item{legend}{logical, whether to display the legend}

\item{caption}{settings of the caption, or \code{NULL} for no caption}

\item{image}{option to include an image below the chart; \code{NULL} or
\code{FALSE} for no image, otherwise a named list with four fields:
\code{base64}, a base64 string representing the image (you can create it
from a file with \code{base64enc::dataURI}),
\code{width} and \code{height} for the image dimensions,
\code{align} for the position, can be \code{"left"} or \code{"right"}}

\item{width}{the width of the chart, e.g. \code{"600px"} or \code{"80\%"};
ignored if the chart is displayed in Shiny, in which case the width is
given in \code{\link{amChart4Output}}}

\item{height}{the height of the chart, e.g. \code{"400px"};
ignored if the chart is displayed in Shiny, in which case the width is
given in \code{\link{amChart4Output}}}

\item{chartId}{a HTML id for the chart}

\item{elementId}{a HTML id for the container of the chart; ignored if the
chart is displayed in Shiny, in which case the id is given by the Shiny id}

\item{data2}{\code{NULL} or a dataframe used to update the data with the
button; its column names must include the column names of \code{data}
given in \code{values} and it must have the same number of rows as
\code{data}}

\item{trend}{option to request trend lines and to set their settings;
\code{FALSE} for no trend line, otherwise a named list of the form
\code{list(yvalue1 = trend1, yvalue2 = trend2, ...)} where
\code{trend1}, \code{trend2}, ... are lists with the following fields:
\describe{
  \item{\code{method}}{
    the modelling method, can be \code{"lm"}, \code{"lm.js"}, \code{nls},
    \code{nlsLM}, or \code{"loess"}; \code{"lm.js"} performs a polynomial
    regression in JavaScript, its advantage is that the fitted regression
    line is updated when the points of the line are dragged
  }
  \item{\code{formula}}{
    a formula passed on to the modelling function for methods \code{"lm"},
    \code{"nls"} or \code{"nlsLM"}; the
    lefthandside of this formula must always be \code{y}, and its
    righthandside must be a symbolic expression depending on \code{x} only,
    e.g. \code{y ~ x}, \code{y ~ x + I(x^2)}, \code{y ~ poly(x,2)}
  }
  \item{\code{order}}{
    the order of the polynomial regression when \code{method = "lm.js"}
  }
  \item{\code{method.args}}{
    a list of additional arguments passed on to the modelling function
    defined by \code{method} for methods \code{"nls"}, \code{"nlsLM"} or
    \code{"loess"}, e.g. \code{method.args = list(span = 0.3)} for
    method \code{"loess"}
  }
  \item{\code{style}}{
    a list of settings for the trend line created with \code{\link{amLine}}
  }
}
it is also possible to request the same kind of trend lines for all series
given by the \code{yValues} argument, by passing a list of the
form \code{list("_all" = trendconfig)}, e.g.
\code{list("_all" = list(method = "lm", formula = y ~ 0+x, style = amLine()))}}

\item{button}{\code{NULL} for the default, \code{FALSE} for no button,
a single character string giving the button label,
or settings of the button given as
a list with these fields: \code{text} for the button label, \code{color} for
the label color, \code{fill} for the button color, and \code{position}
for the button position as a percentage (\code{0} for bottom,
\code{1} for top); this button is used to replace the current data
with \code{data2}}
}
\description{
Create a HTML widget displaying a line chart.
}
\note{
A color can be given by the name of a R color, the name of a CSS
color, e.g. \code{"transparent"} or \code{"fuchsia"}, an HEX code like
\code{"#ff009a"}, a RGB code like \code{"rgb(255,100,39)"}, or a HSL code
like \code{"hsl(360,11,255)"}.
}
\examples{
set.seed(666)
x <- 1:20
dat <- data.frame(
  x = x,
  y1 = rnorm(20, sd = 1.5),
  y2 = rnorm(20, 10, sd = 1.5),
  z1 = rnorm(20, x+5, sd = 1.5),
  z2 = rnorm(20, x+15, sd = 1.5)
)

image <- tryCatch({
  b64 <- base64enc::dataURI(
    file = "https://www.r-project.org/logo/Rlogo.svg",
    mime = "image/svg+xml"
 )
 list(base64 = b64, width = 50, height = 50)
}, error = function(e){
  NULL
})

amRangeAreaChart(
  data = dat,
  width = "700px",
  xValue = "x",
  yValues = rbind(c("y1", "y2"), c("z1", "z2")),
  xLimits = c(1, 20),
  draggable = TRUE,
  backgroundColor = "#30303d",
  tooltip = list(
    y1 = amTooltip(
      text = "[bold]upper: {openValueY}\nlower: {valueY}[/]",
      textColor = "yellow",
      backgroundColor = "darkmagenta",
      backgroundOpacity = 0.8,
      borderColor = "rebeccapurple",
      scale = 0.9
    ),
    y2 = amTooltip(
      text = "[bold]upper: {valueY}\nlower: {openValueY}[/]",
      textColor = "yellow",
      backgroundColor = "darkmagenta",
      backgroundOpacity = 0.8,
      borderColor = "rebeccapurple",
      scale = 0.9
    ),
    z1 = amTooltip(
      text = "[bold]upper: {openValueY}\nlower: {valueY}[/]",
      textColor = "white",
      backgroundColor = "darkred",
      backgroundOpacity = 0.8,
      borderColor = "crimson",
      scale = 0.9
    ),
    z2 = amTooltip(
      text = "[bold]upper: {valueY}\nlower: {openValueY}[/]",
      textColor = "white",
      backgroundColor = "darkred",
      backgroundOpacity = 0.8,
      borderColor = "crimson",
      scale = 0.9
    )
  ),
  bullets = list(
    y1 = amCircle(color = "yellow", strokeColor = "olive"),
    y2 = amCircle(color = "yellow", strokeColor = "olive"),
    z1 = amCircle(color = "orangered", strokeColor = "darkred"),
    z2 = amCircle(color = "orangered", strokeColor = "darkred")
  ),
  alwaysShowBullets = FALSE,
  lineStyle = list(
    y1 = amLine(color = "yellow", width = 3, tensionX = 0.8, tensionY = 0.8),
    y2 = amLine(color = "yellow", width = 3, tensionX = 0.8, tensionY = 0.8),
    z1 = amLine(color = "orangered", width = 3, tensionX = 0.8, tensionY = 0.8),
    z2 = amLine(color = "orangered", width = 3, tensionX = 0.8, tensionY = 0.8)
  ),
  areas = list(
    list(name = "y1-y2", color = "blue", opacity = 0.2),
    list(name = "z1-z2", color = "red", opacity = 0.2)
  ),
  chartTitle = list(text = "Range area chart", color = "whitesmoke"),
  xAxis = list(title = list(text = "Observation",
                            fontSize = 20,
                            color = "silver"),
               labels = list(color = "whitesmoke",
                             fontSize = 17)),
  yAxis = list(title = list(text = "Value",
                            fontSize = 20,
                            color = "silver"),
               labels = list(color = "whitesmoke",
                             fontSize = 17)),
  valueFormatter = "#.#",
  gridLines = list(color = "antiquewhite",
                   opacity = 0.4,
                   width = 1),
  image = image,
  theme = "dark")
}
